import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
version = "1.0"
group= "eu.beezig.laby" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "BeezigLaby"

allprojects {
    project.ext.set("laby", true)
}

compileJava {
    options.compilerArgs << '-g'
}


configurations {
    embed
    compile.extendsFrom embed
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://dl.bintray.com/5zig-reborn/maven"
    }
    maven {
        url "https://libraries.minecraft.net"
    }
    maven {
        url  "https://dl.bintray.com/roccodev/maven"
    }
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

jar {
    manifest.attributes(
            'FMLCorePlugin': 'net.labymod.core.asm.LabyModCoreMod',
            'FMLCorePluginContainsFMLMod': 'true'
    )
}

reobf {
    jar {
        if(System.getProperty("FORGESRG") == null) useNotchSrg()
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'Beezig/src/main/java'
            srcDirs 'BeezigForge/src/main/java'
            // Don't use BeezigForge's ASM, for BeezigLaby has its own ASM transformers
            exclude 'eu/beezig/forge/asm/**'
        }

        resources {
            srcDirs 'src/main/resources'
            srcDirs 'BeezigForge/src/main/resources'
            srcDirs 'Beezig/src/core/messages'
            srcDirs 'Beezig/src/lang'
            srcDirs 'Beezig/src/libraries'
            srcDirs 'Beezig/src/javazoom/jl/decoder'
            exclude '**/*.java'
            exclude '**/*.dll'
            exclude '**/*.dylib'
            exclude '**/*.so'
            exclude '**/*.jnilib'
        }
    }

}

minecraft {
    version = "1.8.9-11.15.1.1722"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    embed(project(':Beezig')) {
        exclude module: 'plugin-api'
        exclude group: 'eu.beezig'
        exclude module: 'lwjgl'
        exclude group: 'asm'
    }
    compile group: 'org.ow2.asm', name: 'asm-debug-all', version: '5.2'
}

jar {
    from {
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
        configurations.embed.collect {
            exclude 'com/google/'
            exclude 'org/apache/'
            exclude 'com/mojang/'
            it.isDirectory() ? it : zipTree(it)
        }
    }
    rename 'language_he_IL.properties', 'language_iw_IL.properties'
}

processResources
        {

            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // Create version.json
            from(sourceSets.main.resources.srcDirs) {
                include '**/*.json'
                def beezigLabyCommit = "git rev-parse HEAD".execute().text.trim()
                def beezigLabyCommits = ("git rev-list --count " + "git describe --tags --abbrev=0".execute().text.trim() +
                        "..HEAD").execute().text.trim()
                def beezigLabyDate = ("git log -1 --pretty=%cI " + beezigLabyCommit).execute().text.trim()

                filter(ReplaceTokens, tokens: [beeziglabyversion: '7.0.0-rc2',
                                               beeziglabycommit: beezigLabyCommit,
                                               beeziglabycommits: beezigLabyCommits,
                                               beeziglabytype: 'release',
                                               beeziglabydate: beezigLabyDate])

                def beezigForgeCommit = "git --git-dir BeezigForge/.git rev-parse HEAD".execute().text.trim()
                def beezigForgeCommits = ("git --git-dir BeezigForge/.git rev-list --count " + "git --git-dir BeezigForge/.git describe --tags --abbrev=0".execute().text.trim() +
                        "..HEAD").execute().text.trim()
                def beezigForgeDate = ("git --git-dir BeezigForge/.git log -1 --pretty=%cI " + beezigForgeCommit).execute().text.trim()

                filter(ReplaceTokens, tokens: [beezigforgeversion: '7.0.0-rc2',
                                               beezigforgecommit: beezigForgeCommit,
                                               beezigforgecommits: beezigForgeCommits,
                                               beezigforgetype: 'release',
                                               beezigforgedate: beezigForgeDate])
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
                exclude '**/*.java'
                exclude '**/*.dll'
                exclude '**/*.dylib'
                exclude '**/*.so'
                exclude '**/*.jnilib'
                exclude '**/*.json'
            }
        }
